<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VS Code + Python 开发 QGIS 插件环境配置指南</title>
    <link href="/2023/10/22/VS-Code-Python-%E5%BC%80%E5%8F%91-QGIS-%E6%8F%92%E4%BB%B6%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <url>/2023/10/22/VS-Code-Python-%E5%BC%80%E5%8F%91-QGIS-%E6%8F%92%E4%BB%B6%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><div class="note note-info">            <p>整篇教程 For Windows，好像Mac没有这么多事。前一段开发插件的时候给同组的同学写的配置文档，恰好发现中文互联网上相关的内容比较少，也不太系统，做一个系统的整理。</p>          </div><h1 id="QGIS-官方Plugin-文档"><a href="#QGIS-官方Plugin-文档" class="headerlink" title="QGIS 官方Plugin 文档"></a>QGIS 官方Plugin 文档</h1><h2 id="Official-Version-What’s-Next-For-Dialog-Plugins"><a href="#Official-Version-What’s-Next-For-Dialog-Plugins" class="headerlink" title="Official Version (What’s Next For Dialog Plugins)"></a>Official Version (What’s Next For Dialog Plugins)</h2><ol><li>If resources.py is not present in your plugin directory, compile the resources file using pyrcc5 (simply use <code>pb_tool</code> or <code>make</code> if you have automake)</li><li>Optionally, test the generated sources using <code>make test</code> (or run tests from your IDE)</li><li>Copy the entire directory containing your new plugin to the QGIS plugin directory (see Notes below)</li><li>Test the plugin by enabling it in the QGIS plugin manager</li><li>Customize it by editing the implementation file <code>viewshed_analysis.py</code></li><li>Create your own custom icon, replacing the default <code>icon.png</code><br>Modify your user interface by opening <code>viewshed_analysis_dialog_base.ui</code> in Qt Designer</li></ol><h1 id="QGIS-插件开发的环境配置"><a href="#QGIS-插件开发的环境配置" class="headerlink" title="QGIS 插件开发的环境配置"></a>QGIS 插件开发的环境配置</h1><h2 id="Environment-Configuration"><a href="#Environment-Configuration" class="headerlink" title="Environment Configuration"></a>Environment Configuration</h2><p>最基础的版本：<a href="https://zhuanlan.zhihu.com/p/344965380">知乎网站：从0开始开发QGIS插件</a></p><p>用于自动创建 GUI 界面的 QGIS 插件：<a href="https://www.qgistutorials.com/en/docs/3/processing_python_plugin.html">Building a Processing Plugin</a> (<a href="https://www.osgeo.cn/qgis-tutorial/docs/3/processing_python_plugin.html">In Chinese</a>)</p><blockquote><p>上面这个工具插件有效解决了插件GUI的问题，可以直接用与QGIS风格非常统一的GUI进行开发，这个工具只适用于算法处理相关的插件</p></blockquote><h2 id="如何把-Tool-导入-QGIS-中"><a href="#如何把-Tool-导入-QGIS-中" class="headerlink" title="如何把 Tool 导入 QGIS 中"></a>如何把 Tool 导入 QGIS 中</h2><ol><li><p>在 Debug 之前首先我们需要将开发好的插件加入到 QGIS 的环境中，这里提供两种方式：</p><ol><li><p>直接把用 Plugin Builder 生成好的整个插件目录拷到<code>C:\Users\---\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins</code></p></li><li><p>这里更推荐用 symbolic link 的方法直接创建软链接 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mklink /D <span class="hljs-string">&quot;C:\Users\---\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\your_plugin&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$</span>&#123;your_plugin_workspace&#125;\your_plugin&quot;</span><br></code></pre></td></tr></table></figure></li></ol> <div class="note note-warning">            <p>WARNING: There is a huge risk though of losing your code if you uninstall the plugin by accident.</p>          </div></li><li><p>重启 QGIS, Menu Plugins -&gt; Manage and Install Plugins</p></li><li><p>把 viewshed analysis 打钩</p></li><li><p>在 Plugins 菜单或者 Toolbox 中可以找到对应的插件</p></li></ol><h1 id="关于使用-VS-Code-进行开发的问题"><a href="#关于使用-VS-Code-进行开发的问题" class="headerlink" title="关于使用 VS Code 进行开发的问题"></a>关于使用 VS Code 进行开发的问题</h1><div class="note note-warning">            <p>用 VS Code 开发是一件非常 tricky 的事情，这可能需要非常长的配置时间</p>          </div><p><strong>再次声明，好像只有Windows有这么多麻烦的问题</strong></p><p>另外，根据官方网站的推荐，最好使用 long-term-release 的版本进行开发 非 long-term-release 的版本的路径可能与下文中的描述略有区别，主要是各种路径和文件名中 qgis-ltr 和 qgis 的区别</p><h2 id="如何在-Integrated-terminal-运行"><a href="#如何在-Integrated-terminal-运行" class="headerlink" title="如何在 Integrated terminal 运行"></a>如何在 Integrated terminal 运行</h2><p>有几种方案解决import qgis相关的问题：</p><ul><li><p>根据以下文件自己配置 settings.json，这些文件基本可以在 QGIS 的根目录下找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">%OSGEO4W_ROOT%/bin/python-qgis-ltr.bat    <br>%OSGEO4W_ROOT%/bin/o4w_env.bat    <br>%OSGEO4W_ROOT%/bin/o4w_env.bat<br></code></pre></td></tr></table></figure></li><li><p>在 Integrated terminal 中运行 <code>%OSGEO4W_ROOT%/bin/python-qgis-ltr-env.bat </code>后再运行python程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rem python<span class="hljs-literal">-qgis-ltr-env</span>.bat    <br>@<span class="hljs-built_in">echo</span> off    call <span class="hljs-string">&quot;%~dp0\o4w_env.bat&quot;</span>   <br>@<span class="hljs-built_in">echo</span> off    path %OSGEO4W_ROOT%\apps\qgis<span class="hljs-literal">-ltr</span>\bin;%PATH%    <br><span class="hljs-built_in">set</span> QGIS_PREFIX_PATH=%OSGEO4W_ROOT:\=/%/apps/qgis<span class="hljs-literal">-ltr</span>   <br><span class="hljs-built_in">set</span> GDAL_FILENAME_IS_UTF8=YES    <br>rem <span class="hljs-built_in">Set</span> VSI cache to be used as buffer, see <span class="hljs-comment">#6448    </span><br><span class="hljs-built_in">set</span> VSI_CACHE=TRUE    <br><span class="hljs-built_in">set</span> VSI_CACHE_SIZE=<span class="hljs-number">1000000</span>    <br><span class="hljs-built_in">set</span> QT_PLUGIN_PATH=%OSGEO4W_ROOT%\apps\qgis<span class="hljs-literal">-ltr</span>\qtplugins;%OSGEO4W_ROOT%\apps\qt5\plugins    <br><span class="hljs-built_in">set</span> PYTHONPATH=%OSGEO4W_ROOT%\apps\qgis<span class="hljs-literal">-ltr</span>\python;%PYTHONPATH%<br></code></pre></td></tr></table></figure></li><li><p>Thanks to <a href="https://gist.github.com/thbaumann/73c873d4c49d8c1add8dc97359cebabe%EF%BC%8C%E6%9C%89%E4%B8%80%E4%B8%AA%E6%9B%B4%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%B0%86.bat%E4%BD%9C%E4%B8%BA">https://gist.github.com/thbaumann/73c873d4c49d8c1add8dc97359cebabe，有一个更简单的方法可以直接将.bat作为</a> vscode 的解释器 (在 vscode 的设置中无法将非.exe的文件设为解释器)</p><blockquote><p>The bread and butter of this configuration is “python.pythonPath”: “C:&#x2F;OSGeo4W64&#x2F;bin&#x2F;python-qgis.bat”, which sets all the correct paths and bindings for us. I don’t really know why it works to refer a .bat file as python interpreter, but apparently it’s fine and fixes alot of linting issues.</p></blockquote></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// settings.json    </span><br><span class="hljs-punctuation">&#123;</span> <br>        <span class="hljs-comment">// 第一个选项貌似是过时的</span><br>        <span class="hljs-attr">&quot;python.pythonPath&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot; %OSGEO4W_ROOT%\\bin\\python-qgis-ltr.bat&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;python.defaultInterpreterPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%OSGEO4W_ROOT%\\bin\\python-qgis-ltr.bat&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>还有一个 tricky 的点是相对路径引用的问题：</p><div class="note note-info">            <p>这段东西是针对 dialog 的那种自己写 GUI 的 plugin 的，processing 系列的插件不太受到这个困扰</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># This works for integragted terminal</span><br><span class="hljs-comment"># Initialize Qt resources from file resources.py</span><br><span class="hljs-keyword">from</span> resources <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># Import the code for the dialog</span><br><span class="hljs-keyword">from</span> visibility_analysis_dialog <span class="hljs-keyword">import</span> VisibilityAnalysisDialog<br><span class="hljs-comment"># --------------------------------------</span><br><span class="hljs-comment"># This works for qgis </span><br><span class="hljs-comment"># Initialize Qt resources from file resources.py</span><br><span class="hljs-keyword">from</span> .resources <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># Import the code for the dialog</span><br><span class="hljs-keyword">from</span> .visibility_analysis_dialog <span class="hljs-keyword">import</span> VisibilityAnalysisDialog<br></code></pre></td></tr></table></figure><h2 id="Debugging-in-VS-Code"><a href="#Debugging-in-VS-Code" class="headerlink" title="Debugging in VS Code"></a>Debugging in VS Code</h2><blockquote><p>Thanks to<br><a href="https://gispofinland.medium.com/cooking-with-gispo-qgis-plugin-development-in-vs-code-19f95efb1977">https://gispofinland.medium.com/cooking-with-gispo-qgis-plugin-development-in-vs-code-19f95efb1977</a><br><a href="https://gist.github.com/thbaumann/73c873d4c49d8c1add8dc97359cebabe">https://gist.github.com/thbaumann/73c873d4c49d8c1add8dc97359cebabe</a></p></blockquote><p>利用 VS Code 对 QGIS 插件进行开发需要利用 QGIS 中的 Debugvs 插件，这个插件会在本地的 5678 端口创建一个 debug 的传输通道，让 VS Code 的 debug launch 可以进行远程的 attach debugging。</p><p>在安装这个插件之前，我们需要在 <strong>QGIS 对应的 python 目录下</strong>安装 ptvsd</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pip install ptvsd<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>这里建议一定在安装之前检查一下当前 Python 的版本是否正确，建议直接打开 OSGeo4W shell 进行配置（通常在<code>%OSGeo4w_ROOT\OSGeo4W.bat</code>）<br>之后直接在 QGIS 中安装 Debugvs 即可</p>          </div><p>我们还需要额外配置一下 VS Code 的 <code>launch.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Python: Remote Attach&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;attach&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5678</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pathMappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;localRoot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/your_plugin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// path to your plugin where you are developing</span><br>            <span class="hljs-attr">&quot;remoteRoot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\---\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\plugins\\your_plugin&quot;</span> <span class="hljs-comment">// path to where the QGIS plugin folder lives </span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>安装好之后在 QGIS 中点击 <code>Plugins -&gt; Enable Debug for Visual Studio -&gt; Enable Debug for Visual Studio</code> 即可打开 Debug Port (localhost:5678)，随后在 VS Code 中直接运行 Debug 即可</p><p>每一次修改之后都要用 <code>Plugin Reloader</code> reload 一次</p>]]></content>
    
    
    <categories>
      
      <category>GIS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code</tag>
      
      <tag>Python</tag>
      
      <tag>QGIS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 建站总结</title>
    <link href="/2023/10/22/hexo-%E5%BB%BA%E7%AB%99/"/>
    <url>/2023/10/22/hexo-%E5%BB%BA%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-建站过程"><a href="#Hexo-建站过程" class="headerlink" title="Hexo 建站过程"></a>Hexo 建站过程</h1><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><ol><li><p>一个 Github 账号，<a href="https://blog.csdn.net/yaorongke/article/details/119086305">申请教程</a></p></li><li><p>在电脑上安装 git，[git安装教程]在(<a href="https://blog.csdn.net/yaorongke/article/details/119085413">https://blog.csdn.net/yaorongke/article/details/119085413</a>)</p></li><li><p>在电脑上安装 NodeJS，<a href="https://blog.csdn.net/yaorongke/article/details/119084295">NodeJS安装教程</a></p></li></ol><h2 id="Hexo-安装和本地测试"><a href="#Hexo-安装和本地测试" class="headerlink" title="Hexo 安装和本地测试"></a>Hexo 安装和本地测试</h2><ol><li><p>安装 hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>查看 hexo 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure></li><li><p>创建 blog</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">hexo init </span><span class="hljs-template-variable">&#123;YOUR_BLOG_NAME&#125;</span><span class="language-xml"></span><br><span class="language-xml">cd </span><span class="hljs-template-variable">&#123;YOUR_BLOG_NAME&#125;</span><span class="language-xml"></span><br><span class="language-xml">npm install</span><br></code></pre></td></tr></table></figure></li><li><p>blog的本地启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d <span class="hljs-comment"># generate and deploy</span><br>hexo s <span class="hljs-comment"># server</span><br></code></pre></td></tr></table></figure></li><li><p>浏览器访问 <code>http://localhost:4000</code> 即可打开新建的博客，页面的默认风格如下<br><img src="/2023/10/22/hexo-%E5%BB%BA%E7%AB%99/hexo_default.png" alt="hexo默认页面"></p></li></ol><p>Hexo 的默认主题可能比较丑陋，不过hexo本身提供了很多不同的主题，比较常用（互联网上资源较多的）有 <a href="https://theme-next.js.org/">NeXT</a> 和 <a href="https://hexo.fluid-dev.com/">Fluid</a></p><h2 id="Github-pages部署"><a href="#Github-pages部署" class="headerlink" title="Github pages部署"></a>Github pages部署</h2><h1 id="Hexo-官方-Hello-world"><a href="#Hexo-官方-Hello-world" class="headerlink" title="Hexo 官方 Hello world"></a>Hexo 官方 Hello world</h1><div class="note note-info">            <p>这个官方的 Hello world 可以看做是一个操作手册</p>          </div><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>博客建站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>博客美化自述</title>
    <link href="/2023/10/07/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%87%AA%E8%BF%B0/"/>
    <url>/2023/10/07/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%87%AA%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里主要记录一下本博客建站过程中用到的美化手段共参考考</p></blockquote><h1 id="访问量统计"><a href="#访问量统计" class="headerlink" title="访问量统计"></a>访问量统计</h1><p><code>Fluid</code> 主题中针对阅读量已经有写好的代码，但是需要自己配置第三方的数据量统计服务才能使用。我们这里使用 <code>LeanCloud</code> 的免费服务来进行统计，同时这个也可以直接用来接入后面的评论区</p><h2 id="1-申请-LeanCloud-账号并创建应用"><a href="#1-申请-LeanCloud-账号并创建应用" class="headerlink" title="1. 申请 LeanCloud 账号并创建应用"></a>1. 申请 LeanCloud 账号并创建应用</h2><p>进入<a href="https://console.leancloud.cn/">官网</a> 注册账号</p><p><img src="/2023/10/07/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%87%AA%E8%BF%B0/%E6%B3%A8%E5%86%8C.png" alt="注册页面"></p><p>注册后需要实名认证和邮箱验证，完成后才能使用各项服务</p><p>验证完成后选择创建应用，选择免费的开发版即可</p><p><img src="/2023/10/07/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%87%AA%E8%BF%B0/%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8.png" alt="创建应用"></p><p>进入该应用的 <code>设置-&gt;应用凭证</code>，找到 <code>AppID</code>, <code>AppKey</code>, <code>REST API 服务器地址</code> 三个属性，记录下来后面使用</p><p><img src="/2023/10/07/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%87%AA%E8%BF%B0/%E5%BA%94%E7%94%A8%E8%AE%B0%E5%BD%95.png" alt="应用记录"></p><h2 id="2-修改-Fluid-配置"><a href="#2-修改-Fluid-配置" class="headerlink" title="2 修改 Fluid 配置"></a>2 修改 Fluid 配置</h2><p>在 <code>_config.fluid.yml</code> 中或者 fluid 主题的 <code>_config.yml</code> 中修改找到以下配置项，按照下文内容修改配置</p><h3 id="网页访问统计配置"><a href="#网页访问统计配置" class="headerlink" title="网页访问统计配置"></a>网页访问统计配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><br>  <span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span><br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span> <span class="hljs-string">你的</span> <span class="hljs-string">AppId</span><br>    <span class="hljs-attr">app_key:</span> <span class="hljs-string">你的</span> <span class="hljs-string">AppKey</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br>    <span class="hljs-attr">server_url:</span> <span class="hljs-string">你的</span> <span class="hljs-string">REST</span> <span class="hljs-string">API</span> <span class="hljs-string">服务器地址</span><br>    <span class="hljs-comment"># 统计页面时获取路径的属性</span><br>    <span class="hljs-comment"># Get the attribute of the page path during statistics</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>    <span class="hljs-comment"># If true, ignore localhost &amp; 127.0.0.1</span><br>    <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><h3 id="打开文章的浏览量计数功能"><a href="#打开文章的浏览量计数功能" class="headerlink" title="打开文章的浏览量计数功能"></a>打开文章的浏览量计数功能</h3><p>这个在 <code>_config.fluid.yml</code> 的 post 配置下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-comment"># Number of visits</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 统计数据来源</span><br>      <span class="hljs-comment"># Data Source</span><br>      <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure><h3 id="页面底部展示网站的-PV，UV"><a href="#页面底部展示网站的-PV，UV" class="headerlink" title="页面底部展示网站的 PV，UV"></a>页面底部展示网站的 PV，UV</h3><p>在 <code>footer</code> 配置项中做调整</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-comment"># Display website PV and UV statistics</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span><br>    <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span><br>    <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><h2 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h2><p><img src="/2023/10/07/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%87%AA%E8%BF%B0/%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E9%87%8F.png" alt="文章浏览量"></p><p><img src="/2023/10/07/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%87%AA%E8%BF%B0/pvuv.png" alt="pv &amp; uv"></p><h1 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h1><p>评论功能相关的代码同样是 Fluid 本身写好的，修改一些配置即可，我们这里使用基于 leancloud 的 valine 来配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus | discuss</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span> <span class="hljs-string">你的</span> <span class="hljs-string">LeanCloud</span> <span class="hljs-string">AppID</span><br>  <span class="hljs-attr">appKey:</span> <span class="hljs-string">你的</span> <span class="hljs-string">LeanCloud</span> <span class="hljs-string">AppKey</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">说点什么...</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiCDN:</span><br>  <span class="hljs-attr">emojiMaps:</span><br>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="页面效果-1"><a href="#页面效果-1" class="headerlink" title="页面效果"></a>页面效果</h2><p><img src="/2023/10/07/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%87%AA%E8%BF%B0/comments.png" alt="发表评论"></p><h1 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h1><p>这部分插件通常需要用到额外的 js&#x2F;css 文件，需要添加到 <code>source/js</code> 文件夹中</p><blockquote><p>所有这部分文件都可以在<a href="https://github.com/duhaode520/duhaode520.github.io">博客原始 repo </a>的 source 文件夹中找到</p></blockquote><h2 id="添加主页创建时间"><a href="#添加主页创建时间" class="headerlink" title="添加主页创建时间"></a>添加主页创建时间</h2><p>在 <code>_config.fluid.yml</code> 中找到 <code>footer</code> 进行添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>然后创建文件 <code>source/js/duration.js</code>，其中内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createtime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> grt= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;03/10/2023 00:00:00&quot;</span>);<span class="hljs-comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span><br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>()+<span class="hljs-number">250</span>);<br>    days = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>; dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum); hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> ==<span class="hljs-number">1</span> )&#123;hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes); <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> ==<span class="hljs-number">1</span> )&#123;mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;&#125;<br>    seconds = (now - grt ) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds); <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> ==<span class="hljs-number">1</span> )&#123;snum = <span class="hljs-string">&quot;0&quot;</span> + snum;&#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="hljs-string">&quot; 天 &quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot; 小时 &quot;</span> + mnum + <span class="hljs-string">&quot; 分 &quot;</span> + snum + <span class="hljs-string">&quot; 秒&quot;</span>;<br>&#125;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;createtime()&quot;</span>,<span class="hljs-number">250</span>);<br></code></pre></td></tr></table></figure><h2 id="动态彩带"><a href="#动态彩带" class="headerlink" title="动态彩带"></a>动态彩带</h2><p>首先在 <code>_config.fluid.yml</code> 中找到 <code>custom.js</code> 进行添加:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">custom_js:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/js/DynamicRobbin.js</span><br></code></pre></td></tr></table></figure><p>然后添加文件 <code>source/js/DynamicRobbin.js</code>，在项目repo中直接拷贝即可：<a href="https://github.com/duhaode520/duhaode520.github.io/tree/main/source/js/DynamicRobbin.js">https://github.com/duhaode520/duhaode520.github.io/tree/main/source/js/DynamicRobbin.js</a>  </p>]]></content>
    
    
    <categories>
      
      <category>博客建站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/10/06/test-article/"/>
    <url>/2023/10/06/test-article/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2023/10/06/test-article/test.png" class="" title="图片引用方法一"><p><img src="/2023/10/06/test-article/test.png" alt="图片引用方法二"></p><p><img src="/images/test.png" alt="图片引用方法三"></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yarn 简介</title>
    <link href="/2023/03/17/YARN-%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/03/17/YARN-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Yarn的运行机制"><a href="#Yarn的运行机制" class="headerlink" title="Yarn的运行机制"></a>Yarn的运行机制</h2><p><img src="/2023/03/17/YARN-%E7%AE%80%E4%BB%8B/yarn_arch.png" alt="Yarn 的运行机制"></p><p>Yarn中三类重要实体</p><ul><li>resource manager：管理集群上资源使用</li><li>node manager：运行在所有节点上，能够启动和监控容器</li><li>Container：用于执行特定的应用程序，有一定的资源限制</li></ul><p>运行流程：</p><ul><li>客户端联系 resource manager，要求启动一个 application master 进程</li><li>resource manager 找到一个可以启动 application master 的 node manager，然后启动这个容器<ul><li>application运行起来后可能是返回一个计算 application 给客户端，也可能是执行分布式计算——申请资源、创建新的 application 和容器</li></ul></li></ul><p>Yarn 本身不提供通信机制，只是资源的申请分配</p><p>申请分配为了节省带宽还是采用了在网络拓扑上的就近（节点——机架——any）</p><p>按照用户和application之间来分类</p><ul><li>一个用户作业对应一个application：MapReduce</li><li>用户作业中的一个工作流对应一个application：Spark</li><li>多个也用户对一个 application： Slider</li></ul><div class="note note-primary">            <p>🔴 其实就是：一对一，一对多，多对一</p>          </div><h2 id="Yarn的优势"><a href="#Yarn的优势" class="headerlink" title="Yarn的优势"></a>Yarn的优势</h2><ul><li>Scalability：Yarn中对于jobtracker 的资源调度和任务监控的职责分离带来的好处</li><li>Availability：同样是职责分离，resource manager 和 application master 可以分别做高可用</li><li>Utilization: Yarn 对于资源的管理更精细，slot比较大</li><li>Multitenancy：Yarn 可以为更多的应用提供服务，MapReduce仅是期中的一个</li></ul><h2 id="Yarn的调度"><a href="#Yarn的调度" class="headerlink" title="Yarn的调度"></a>Yarn的调度</h2><p>三种调度器：</p><ul><li><p>FIFO调度器：简单不用配置，不适合共享集群，每个任务必须都能到轮到自己才行</p>  <div class="note note-primary">            <p>感觉基本上只适合自己玩玩的时候用，或者资源特别丰盛的时候，每个人实际上own了一个集群可以自己玩     </p>          </div>   </li><li><p><strong>容量调度器：</strong>有一个独立的队列保证小作业的提交和启动，大作业等待的时间相对长 (default)</p></li><li><p>公平调度器：每一个用户平分所有资源（在原有任务释放出来后），每一个用户的任务再分别平分这个用户拥有的所有的资源</p></li></ul><p><strong>容量调度器的配置 <code>capacity-scheduler.xml</code>：</strong></p><p>可以配置每一个队列拥有的固定的 capacity（%） 和用于弹性使用的 max capacity（不设置默认可以占用全部的容量）, 队列还可以通过 <code>a.b.queues</code> 的方式定义子队列</p><p>通过属性 <code>mapreduce.job.queuename</code> 决定任务推送的队列</p><p><strong>公平调度器的配置 <code>fair-scheduler.xml</code>：</strong></p><ul><li><p>权重元素：可以设置哪一个队列的占比更大，通过 <code>queue.weight</code> 属性</p></li><li><p>调度策略：默认是 fair，也可以有队列级的 fifo（只对该队列中的各个任务），DRF (Dominant Resource Fairness, 根据占用最多的资源进行 fair 调度)</p></li><li><p>可以通过 <code>queuePlacementPolicy</code> 设置队列放置规则，默认会有 “specified”, “user”, “primaryGroup”, “default” 等</p>  <div class="note note-primary">            <p>💡 如果只使用 default 则相当于便捷的实现了对于所有任务的公平调度，因为所有任务都会被塞进一个队列中</p>          </div></li><li><p>抢占：公平调度器允许抢占，但是抢占会降低集群的效率</p></li></ul><p><strong><strong>延迟调度</strong></strong></p><p>一个非常tricky的调度策略：如果请求节点容器时发现没有，可以等待数秒（数个heartbeat（一般是1s）），这样可以显著提高在当前节点获得一个容器的机会，而不是下一级节点（节点→机架→others）</p><p>每一个 heartbeat 是一个潜在的调度机会</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>引擎基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop HDFS</title>
    <link href="/2023/03/07/Hadoop-HDFS/"/>
    <url>/2023/03/07/Hadoop-HDFS/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>《Hadoop 权威指南》读书笔记</p>          </div><p>HDFS是流式访问的：一次写入，多次读取且只支持单个写入者，而且是增量写入的</p><h2 id="HDFS的几个基本概念"><a href="#HDFS的几个基本概念" class="headerlink" title="HDFS的几个基本概念"></a>HDFS的几个基本概念</h2><ul><li>数据块：默认为128MB</li></ul><div class="note note-primary">            <p>💡 这个128MB与磁盘的传输速率是匹配的，如果传输速率提高，那么就可以有更大的 block 大小</p>          </div><ul><li>namenode 和 datanode<ul><li>namenode：维护文件系统命名空间（树）：永久保存在本地磁盘</li><li>datanode：储存并检索 blocks，定期向 namenode 报告储存的 block 列表</li><li>两种容错方法：备份文件或者添加辅助namenode</li></ul></li><li>块缓存：一般一个块仅在一个datanode中有块缓存</li><li>联邦HDFS：在数据规模太大时，内存会成为瓶颈——允许多个namenode</li><li>高可用性</li></ul><div class="note note-primary">            <p>💡 区分高可用性和备份：高可用性需要在原有的down之后在不可被用户感知的时间内有新的主机上线</p><p><strong>Hadoop2 维护高可用的方式</strong><br>有一对namenodes处于主备配置。如果活动namenode故障，备用namenode将接管其职责，以继续为客户端请求提供服务而不会出现重大中断。需要进行一些体系结构更改才能实现这一点：</p><ol><li>namenodes必须使用高可用共享存储来共享编辑日志。当备用namenode启动时，它将读取共享编辑日志的末尾以将其状态与活动namenode同步，然后继续读取由活动namenode编写的新条目。</li><li>由于块映射存储在namenode的内存中而不是磁盘上，因此datanodes必须向两个namenodes发送块报告。</li><li>客户端必须配置以处理namenode故障转移，使用对用户透明的机制。</li><li>备用namenode的角色被主备namenodes代替，后者对活动namenode的名称空间进行定期检查点。</li></ol><p>Hadoop 的高可用同时也是使用了 Zookeeper 的，在默认的情况下是用 Zookeeper+心跳监视来实现故障转移</p>          </div><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>HTTP比原生的要慢，不要用他传输大文件（就是用 <code>hdfs://</code> 这种访问来传输文件）</p><h3 id="基于-Java-的读写"><a href="#基于-Java-的读写" class="headerlink" title="基于 Java 的读写"></a>基于 Java 的读写</h3><p><strong>读：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> FileSystem.get(URI.create(uri), conf);<br><span class="hljs-type">FSDataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>in = fs.open(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(uri));<br>in.seek(<span class="hljs-number">0</span>)<br><span class="hljs-comment">// FSDataInputStream extends InputStream</span><br><span class="hljs-comment">// Special Methods:</span><br><span class="hljs-comment">// void seek(long pos);</span><br><span class="hljs-comment">// long getPos();</span><br><span class="hljs-comment">// 实现随机访问和当前位置距离初始的偏移量</span><br></code></pre></td></tr></table></figure><p><strong><strong>写：</strong></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> fs.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(dst), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Progressable</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">progress</span><span class="hljs-params">()</span> &#123;<br>System.out.print(<span class="hljs-string">&quot;.&quot;</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>可以重载 <code>Progressable</code> 接口实现写入过程的 progress bar，也可以使用 <code>append(Path f)</code> 函数向一个文件的最后来追加</p><div class="note note-warning">            <p>💡 <code>create</code> 函数可以创建不存在的父文件夹，尽管这样做可能有时并不安全，是递归创建的<br><code>append</code> 由于调用了 <code>create</code>，因此也拥有这样的特性</p>          </div><p>此外，用 <code>FileSystem</code> 的 <code>mkdir</code> 可以创建目录，尽管通常情况不需要这样做</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p><code>FileStatus</code> 类保存了文件的 metadata，同时 FS 可以通过 listStatus 函数来列出目录中的所有内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// code example here to covert FileStatus to Path</span><br>FileStatus[] status = fs.listStatus(paths);<br>Path[] listedPaths = FileUtil.stat2Paths(status);<br></code></pre></td></tr></table></figure><p><code>globStatus</code> 方法用于匹配通配符，复杂的基于正则表达式的匹配需要实现 <code>PathFilter</code> 接口</p><p><code>delete</code> 来删除数据，并可以决定是否递归删除</p><h2 id="读写流程解析"><a href="#读写流程解析" class="headerlink" title="读写流程解析"></a>读写流程解析</h2><h3 id="读流程"><a href="#读流程" class="headerlink" title="读流程"></a>读流程</h3><p><img src="/2023/03/07/Hadoop-HDFS/read.jpeg" alt="HDFS read"></p><ul><li><code>open</code> 打开一个要读取的文件，创建 InputStream<ul><li>这个过程通过 FileSystem 向 Namenode 发送一个RPC实现，申请文件起始块的地址</li><li>对于每一个块请求，Namenode 会返回一个 block 所在的 Datanode 的地址</li><li>这些地址是按照网络拓扑的远近顺序返回的</li></ul></li><li><code>read</code> 函数让 InputStream 去进行读操作，InputStream 会找到最近的 Datanode 读取第一个块</li><li>在这个块读取完时，InputStream关闭和这个 Datanode 的连接，并转到下一个最近的 Datanode 继续读取<ul><li>FS 向 Namenode 请求文件块的地址是一批一批的，在这一批读完前会请求到下一批的地址，读取过程是连续的</li><li>Namenode 储存文件快的起始地址是在内存中的，所以非常高效</li></ul></li><li>读取完成后关闭连接</li></ul><div class="note note-primary">            <p>🔴 容错和故障处理：如果发现连接失败或者读取的块不完整，FS 会通知 namenode，以后不从这个 datanode 中进行读取。</p>          </div><h3 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h3><p><img src="/2023/03/07/Hadoop-HDFS/write.jpeg" alt="HDFS write"></p><ul><li>首先用 <code>create</code> 方法来创建文件，然后同样由 FS 向 Namenode 发送一个 RPC 来进行 namenode 处文件记录的创建</li><li>Namenode 会进行也系列检查确保创建是合法且有权限的，然后返回给 FS，这个时候 FS 会返回给 client 一个 OutputStream。OutputStream 负责进行 Namenode 和 datanode 的通信。</li><li>OutputStream 将要写入的 blocks 放入一个 data queue，然后执行一个流水线过程<ul><li>OutStream 将 block 写入请求到的最近的 datanode</li><li>然后datanode将其流水线写到 replica 的 datanode中</li><li>然后再流水线返回</li><li>OutputStream 还维护一个 ack queue，记录完全写完的block</li></ul></li></ul><div class="note note-primary">            <p>🔴 故障容错处理：如果有一个写入故障的数据包，立刻关掉整个pipeline，把所有在pipeline 中的数据包返回到数据队列的前端，然后在正常的 datanode 的 block 制定一个表示，然后传递给 namenode。 namenode 意识到 repica 不足时，会继续在新节点上创建副本</p>          </div><ul><li>整个在写入完成后调用 close 方法</li></ul><h2 id="distcp复制"><a href="#distcp复制" class="headerlink" title="distcp复制"></a>distcp复制</h2><p>distcp 可以提供 HDFS 之间的大批量复制</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>引擎基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
